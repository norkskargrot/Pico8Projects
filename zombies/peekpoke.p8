pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
p={x=32,y=32}
cpath=1
pathoff={{x=0,y=0},{x=0,y=0}}
z={}

hcols={2,3,11}
bcols={14,12}

function _init()
	cls(0)
	drawmapcollide(1,0)
	--poke(0x5f2c,3)
	poke(0x5f36,16)
	for i=0,500 do
		local x,y=rnd(128),rnd(128)
		if pget(x+64,y)==0 then
			local h=hcols[ceil(rnd(#hcols))]
			local b=bcols[ceil(rnd(#bcols))]
			--add(z,{x=x,y=y,hcol=h,bcol=b})
		end
	end
	restartpathing()
end

function _update()
	clearquad(1,0)
	drawmapcollide(1,0)

	--move player
	local dx,dy,spd=0,0,0.3
	if (btn(0)) dx-=spd
	if (btn(1)) dx+=spd
	if (btn(2)) dy-=spd
	if (btn(3)) dy+=spd
	if samp(p.x+dx,p.y+dy)!=5 then
		p.x,p.y=p.x+dx,p.y+dy
	end
--[[
	elseif pget(p.x+64,p.y+dy)!=5 then
		p.x,p.y=p.x,p.y+dy
	elseif pget(p.x+dx+64,p.y)!=5 then
		p.x,p.y=p.x+dx,p.y
	end
	]]--
	
	pathiterate()
	
	--clip(63,0,127,63)
	--zombies
	for k,v in pairs(z) do
		local dir=getdir(v.x,v.y)-1
		if dir!=-1 and rnd(1)>0.7 then
			local dx=-0.6*(dir%3-1)
			local dy=-0.6*(flr(dir/3)-1)
			local nx,ny=v.x+dx,v.y+dy
			if samp(nx,ny)==0 then
				v.x,v.y=nx,ny
			end
		end
		writ(v.x,v.y,8)
	end
	clip()
	printh(stat(1))
end

function _draw()
	camera(p.x-32,p.y-32)
	clip(0,0,63,63)

	--map bottom layer
	clearquad(0,0)
	map(0,0,0,0,128,128)
	
	--zombies
	for k,v in pairs(z) do
		pset(v.x,v.y,v.bcol)
	end
	for k,v in pairs(z) do
		pset(v.x,v.y-1,v.hcol)
	end
	
	--player
	pset(p.x,p.y,8)
	pset(p.x,p.y-1,15)
	
	--map top layer
	for i=0,15 do
		palt(i,true)
	end
	pal(5,6)
	palt(5,false)
	map(0,0,0,-1,128,128)
	
	camera()
	clip()
end

function drawmapcollide(x,y)
	--pallete
	for i=0,15 do
		pal(i,0)
	end
	pal(5,5)
	
	--draw
	clip(64*x,64*y,64*x+64,64*y+64)
	local off=pathoff[cpath+1]
	map(0,0,64*x+off.x,64*y+off.y,8,8)
	
	--end
	resetpal()
	clip()
end

function resetpal()
	pal()
	pal(11,131,1)
	pal(2,139,1)
	pal(12,128,1)
	pal(14,133,1)
end

function getdir(x,y)
	local off=pathoff[2-cpath]
	x,y=x+off.x,y+off.y
	if (x<0 or y<0 or x>64 or y>64) return 0
	return pget(x+(1-cpath)*64,y+64)
end

function samp(x,y)
	local off=pathoff[2-cpath]
	x,y=x+off.x,y+off.y
	if (x<0 or y<0 or x>64 or y>64) return 0
	pset(x+64,y,8)
	return pget(x+64,y)
end

function writ(x,y)
	clip(63,0,127,63)
	local off=pathoff[2-cpath]
	x,y=x+off.x,y+off.y
	pset(x+64,y,8)
	clip()
end
-->8
--pathing

function pathiterate()
	local pointsperframe=500
	local maxdist=150
	local i=0
	while true do
		local remaining={}
		--iterate through active
		for k,v in pairs(active) do
			if i<pointsperframe then
				updatespaces(v.x,v.y)
				i+=1
			else
				add(remaining,v)
			end
		end
		if (i>=pointsperframe) then
			active=remaining
			return
		end
		pathdist+=1
		active=newlist
		newlist={}
		if (pathdist>maxdist) then
			restartpathing()
		end
	end
end

function restartpathing()
	cpath=1-cpath
	clearquad(cpath,1)
	local off=pathoff[cpath+1]
	off.x,off.y=32-flr(p.x),32-flr(p.y)
	drawmapcollide(cpath,1)
	active={{x=32,y=32}}
	newlist={}
	pathdist=0
end

function updatespaces(x,y)
	if rnd(1)>0.5 then
		updatespace(x,y-1,2)
		updatespace(x-1,y,4)
		updatespace(x+1,y,6)
		updatespace(x,y+1,8)
	else
		updatespace(x,y+1,8)
		updatespace(x+1,y,6)
		updatespace(x-1,y,4)
		updatespace(x,y-1,2)
	end
end

function updatespace(x,y,col)
	if (x<0 or y<0 or x>63 or y>63) return
	
	if cpget(x+cpath*64,y+64)==0 then
		add(newlist,{x=x,y=y})
		cpset(x+cpath*64,y+64,col)
	end
end

function clearquad(x,y)
	local start=0x6000+y*0x1000
	local offset=x*32
	for i=0,63 do
		memset(start+i*64+offset,0,32)
	end
end

function cpget(x,y)
	return 0xf&@(0x6000+(y<<6)+(x>>1))>>(x%2<<2)
end

function cpset(x,y,v)
	local addr=0x6000+(y<<6)+(x>>1)
	local shft=(x%2<<2)
	local cur=@(addr)&(0xf0>>shft)
	poke(addr,cur|v<<shft)
end

__gfx__
ddddddddd11111dd55555555ddddddddddddddddd11111ddddddddddd11111dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd544444455555555dddddddddd11d11ddddddddddd11d11dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd544444444444545dddddddddd11d111111111111111d11dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd444444454444544dddddddddd111111111111111111111dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11111dd555554454444545dddddddddd11111dd1ddd1dddd11111dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd544444454444445dddddddddd111111111111111111111dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd544444455545555dddddddddd11d111111111111111d11dd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd11d11dd55555555ddddddddddddddddd11d11ddddddddddd11d11dd0000000000000000000000000000000000000000000000000000000000000000
__map__
0203040104040402030401040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040102030404040401040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404020506060606060607040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0203040102040203040401040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0204040103040404020301040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040102030404040401040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060704040402030201040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040104040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
